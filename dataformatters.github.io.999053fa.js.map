{"mappings":"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","sources":["<anon>","src/js/csvMapper.js"],"sourcesContent":["var $87e25a54f10bf52d$exports = {};\n// DOM Elements\nconst $87e25a54f10bf52d$var$fileUploadArea = document.getElementById('fileUploadArea');\nconst $87e25a54f10bf52d$var$csvFileInput = document.getElementById('csvFile');\nconst $87e25a54f10bf52d$var$fileStatus = document.getElementById('fileStatus');\nconst $87e25a54f10bf52d$var$csvPreview = document.getElementById('csvPreview');\nconst $87e25a54f10bf52d$var$mapCsvPreview = document.getElementById('mapCsvPreview');\nconst $87e25a54f10bf52d$var$templateSearch = document.getElementById('templateSearch');\nconst $87e25a54f10bf52d$var$templateSearchDiv = document.getElementById('templateSearchDiv');\nconst $87e25a54f10bf52d$var$templateOptions = document.getElementById('templateOptions');\n// const selectedTemplate = document.getElementById('selectedTemplate');\nconst $87e25a54f10bf52d$var$mappingTableBody = document.getElementById('mappingTableBody');\nconst $87e25a54f10bf52d$var$generateButton = document.getElementById('generateButton');\nconst $87e25a54f10bf52d$var$addMappingButton = document.getElementById('addMappingButton');\n// const successMessage = document.getElementById('successMessage');\nconst $87e25a54f10bf52d$var$errorMessage = document.getElementById('errorMessage');\n// State variables\nlet $87e25a54f10bf52d$var$mappingConfig = {\n    firstname: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    lastname: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    memberid: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    gender: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    dob: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    pickuptime: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    dropofftime: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    tollsamt: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    congestionfee: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    mileage: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    servicetype: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    authorization: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    puaddress: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    pucity: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    pustate: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    pickupzip: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    doaddress: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    docity: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    dostate: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    },\n    dropoffzip: {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    }\n};\nlet $87e25a54f10bf52d$var$filename = '';\nlet $87e25a54f10bf52d$var$savedConfigurations = [];\nlet $87e25a54f10bf52d$var$isProcessing = false;\nlet $87e25a54f10bf52d$var$availableColumns = [];\nlet $87e25a54f10bf52d$var$availableColumnsObject = {};\nlet $87e25a54f10bf52d$var$previewRows = [];\nlet $87e25a54f10bf52d$var$csvData = null;\nlet $87e25a54f10bf52d$var$csvHeaders = [];\nlet $87e25a54f10bf52d$var$currentTemplate = null;\n// let templateFields = {\n//     customer: ['Customer ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Address'],\n//     product: ['Product ID', 'Product Name', 'Category', 'Price', 'Stock', 'Description'],\n//     inventory: ['Item ID', 'Item Name', 'Quantity', 'Location', 'Last Updated', 'Status'],\n//     sales: ['Order ID', 'Customer', 'Product', 'Quantity', 'Price', 'Date'],\n//     employee: ['Employee ID', 'Name', 'Department', 'Position', 'Hire Date', 'Salary']\n// };\n// Default template for auto-mapping\nconst $87e25a54f10bf52d$var$defaultTemplate = {\n    firstname: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    lastname: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    memberid: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    gender: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    dob: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    pickuptime: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    dropofftime: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    tollsamt: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    congestionfee: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    mileage: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    servicetype: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    authorization: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    puaddress: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    pucity: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    pustate: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    pickupzip: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    doaddress: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    docity: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    dostate: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    },\n    dropoffzip: {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    }\n};\n// File Upload Handling\n$87e25a54f10bf52d$var$fileUploadArea.addEventListener('dragover', (e)=>{\n    e.preventDefault();\n    $87e25a54f10bf52d$var$fileUploadArea.style.borderColor = '#4299e1';\n    $87e25a54f10bf52d$var$fileUploadArea.style.backgroundColor = '#e6f7ff';\n});\n$87e25a54f10bf52d$var$fileUploadArea.addEventListener('dragleave', ()=>{\n    $87e25a54f10bf52d$var$fileUploadArea.style.borderColor = '#cbd5e0';\n    $87e25a54f10bf52d$var$fileUploadArea.style.backgroundColor = '#ebf8ff';\n});\n$87e25a54f10bf52d$var$fileUploadArea.addEventListener('drop', (e)=>{\n    e.preventDefault();\n    $87e25a54f10bf52d$var$fileUploadArea.style.borderColor = '#cbd5e0';\n    $87e25a54f10bf52d$var$fileUploadArea.style.backgroundColor = '#ebf8ff';\n    if (e.dataTransfer.files.length) {\n        $87e25a54f10bf52d$var$csvFileInput.files = e.dataTransfer.files;\n        $87e25a54f10bf52d$var$handleFileUpload();\n    }\n});\n$87e25a54f10bf52d$var$csvFileInput.addEventListener('change', $87e25a54f10bf52d$var$handleFileUpload);\nfunction $87e25a54f10bf52d$var$handleFileUpload() {\n    const file = $87e25a54f10bf52d$var$csvFileInput.files[0];\n    if (file && file.type === 'text/csv') {\n        $87e25a54f10bf52d$var$filename = file.name;\n        $87e25a54f10bf52d$var$fileStatus.textContent = `File selected: ${file.name}`;\n        // templateSearchDiv.style.marginTop = '-635px';\n        const reader = new FileReader();\n        reader.onload = function(e) {\n            $87e25a54f10bf52d$var$processCSV(e.target.result);\n        };\n        reader.readAsText(file);\n    } else {\n        $87e25a54f10bf52d$var$filename = '';\n        // templateSearchDiv.style.marginTop = '-390px';\n        $87e25a54f10bf52d$var$fileStatus.textContent = 'Please select a valid CSV file.';\n        $87e25a54f10bf52d$var$csvPreview.innerHTML = '<p>CSV preview will appear here after uploading a file.</p>';\n        $87e25a54f10bf52d$var$mapCsvPreview.innerHTML = '<p>Mapped Data Preview (First 2 Rows) will appear here after configuring the mapping.</p>';\n        $87e25a54f10bf52d$var$csvData = null;\n        $87e25a54f10bf52d$var$csvHeaders = [];\n        $87e25a54f10bf52d$var$updateGenerateButtonState();\n    }\n}\nfunction $87e25a54f10bf52d$var$processCSV(csvText) {\n    try {\n        $87e25a54f10bf52d$var$isProcessing = true;\n        // Simple CSV parsing\n        const rows = csvText.split(\"\\n\").filter((row)=>row.trim());\n        const headers = rows[0].split(\",\").map((header)=>header.trim());\n        $87e25a54f10bf52d$var$availableColumns = headers;\n        const headersObject = {};\n        headers.forEach((header, index)=>{\n            headersObject[header] = index + 1;\n        });\n        $87e25a54f10bf52d$var$availableColumnsObject = headersObject;\n        const dataRows = rows.slice(1).map((row)=>row.split(\",\").map((cell)=>cell.trim()));\n        // preview rows (first 2 data rows)\n        $87e25a54f10bf52d$var$previewRows = dataRows.slice(0, 2);\n        $87e25a54f10bf52d$var$csvData = {\n            headers: headers,\n            headersObject: headersObject,\n            rows: dataRows\n        };\n        // for (let i = 1; i < lines.length; i++) {\n        //     if (lines[i].trim() === '') continue;\n        //     // Handle commas in quoted fields\n        //     let row = [];\n        //     let inQuotes = false;\n        //     let currentField = '';\n        //     for (let j = 0; j < lines[i].length; j++) {\n        //         const char = lines[i][j];\n        //         if (char === '\"') {\n        //             inQuotes = !inQuotes;\n        //         } else if (char === ',' && !inQuotes) {\n        //             row.push(currentField.trim().replace(/\"/g, ''));\n        //             currentField = '';\n        //         } else {\n        //             currentField += char;\n        //         }\n        //     }\n        //     row.push(currentField.trim().replace(/\"/g, ''));\n        //     if (row.length === headers.length) {\n        //         const rowObj = {};\n        //         headers.forEach((header, index) => {\n        //             rowObj[header] = row[index];\n        //         });\n        //         csvData.push(rowObj);\n        //     }\n        // }\n        // Check if there's a matching saved configuration\n        const headerSignature = headers.sort().join(',');\n        const matchingConfig = $87e25a54f10bf52d$var$savedConfigurations.find((config)=>config.headerSignature === headerSignature);\n        if (matchingConfig) {\n            $87e25a54f10bf52d$var$mappingConfig = matchingConfig.mapping;\n            $87e25a54f10bf52d$var$templateSearch.value = matchingConfig.name;\n        // alert(`Configuration \"${matchingConfig.name}\" automatically applied`, \"success\");\n        } else {\n            // Try auto-mapping based on the default template\n            // Try auto-mapping based on the default template\n            const initialMapping = {\n                ...$87e25a54f10bf52d$var$mappingConfig\n            };\n            Object.keys(initialMapping).forEach((field)=>{\n                const fieldTemplate = $87e25a54f10bf52d$var$defaultTemplate[field];\n                // Look for column name matches\n                const columnName = fieldTemplate.columnNames.find((name)=>headersObject[name]);\n                if (columnName) initialMapping[field] = {\n                    columnName: columnName || '',\n                    delimiter: \"\",\n                    position: 0\n                };\n            });\n            $87e25a54f10bf52d$var$mappingConfig = initialMapping;\n        }\n        $87e25a54f10bf52d$var$displayCSVPreview();\n        $87e25a54f10bf52d$var$updateFieldMappings();\n        $87e25a54f10bf52d$var$updateGenerateButtonState();\n        $87e25a54f10bf52d$var$displayMapCSVPreview();\n        $87e25a54f10bf52d$var$isProcessing = false;\n    } catch (error) {\n        alert(\"Error processing CSV file. Please check the format.\", error.message);\n        $87e25a54f10bf52d$var$isProcessing = false;\n        console.error('error: ', error);\n    }\n}\nfunction $87e25a54f10bf52d$var$displayCSVPreview() {\n    if (!$87e25a54f10bf52d$var$previewRows || !$87e25a54f10bf52d$var$previewRows.length || !$87e25a54f10bf52d$var$csvData || !$87e25a54f10bf52d$var$csvData.headers || !$87e25a54f10bf52d$var$csvData.headers.length) {\n        $87e25a54f10bf52d$var$csvPreview.innerHTML = '<p>No valid data found in the CSV file.</p>';\n        return;\n    }\n    let tableHTML = '<p>Original Data (First 2 Rows)</p><table><thead><tr>';\n    const uploadCsvHeaders = Object.keys($87e25a54f10bf52d$var$csvData.headersObject);\n    uploadCsvHeaders.forEach((header)=>{\n        tableHTML += `<th>${header}</th>`;\n    });\n    tableHTML += '</tr></thead><tbody>';\n    // Show first 2 rows only for preview\n    $87e25a54f10bf52d$var$previewRows.forEach((row)=>{\n        tableHTML += '<tr>';\n        uploadCsvHeaders.forEach((header)=>{\n            tableHTML += `<td>${row[$87e25a54f10bf52d$var$csvData.headersObject[header] - 1] || ''}</td>`;\n        });\n        tableHTML += '</tr>';\n    });\n    tableHTML += '</tbody></table>';\n    $87e25a54f10bf52d$var$csvPreview.innerHTML = tableHTML;\n}\nfunction $87e25a54f10bf52d$var$displayMapCSVPreview() {\n    if (!$87e25a54f10bf52d$var$previewRows || !$87e25a54f10bf52d$var$previewRows.length || !$87e25a54f10bf52d$var$csvData || !$87e25a54f10bf52d$var$csvData.headers || !$87e25a54f10bf52d$var$csvData.headers.length || !$87e25a54f10bf52d$var$hasValidMappings()) {\n        $87e25a54f10bf52d$var$mapCsvPreview.innerHTML = '<p>Mapped Data Preview (First 2 Rows) will appear here after configuring the mapping.</p>';\n        return;\n    }\n    try {\n        $87e25a54f10bf52d$var$errorMessage.style.display = 'none';\n        const mappedData = [];\n        // Create headers row\n        // const fields = templateFields[currentTemplate];\n        const fields = Object.keys($87e25a54f10bf52d$var$mappingConfig);\n        let tableHTML = '<p>Mapped Data (First 2 Rows)</p><table><thead><tr>';\n        fields.forEach((header)=>{\n            tableHTML += `<th>${header.replace(/_/g, ' ')}</th>`;\n        });\n        tableHTML += '</tr></thead><tbody>';\n        // Show first 2 rows only for preview\n        $87e25a54f10bf52d$var$previewRows.forEach((previewRow)=>{\n            tableHTML += '<tr>';\n            fields.forEach((field)=>{\n                const fieldConfig = $87e25a54f10bf52d$var$mappingConfig[field];\n                const columnIndex = $87e25a54f10bf52d$var$csvData.headersObject[fieldConfig.columnName];\n                let value = previewRow[columnIndex - 1] || '';\n                // Apply delimiter and position if provided\n                const parts = value.split(fieldConfig.delimiter || null);\n                const position = parseInt(fieldConfig.position) || 0;\n                value = parts.length > position ? parts[position].trim() : '';\n                tableHTML += `<td>${value || ''}</td>`;\n            });\n            // Process each field mapping\n            // const rows = mappingTableBody.querySelectorAll('tr');\n            // rows.forEach((row, index) => {\n            //     const sourceSelect = row.querySelector('.search-input-mapping');\n            //     const delimiter = row.querySelector('.delimiter-input').value;\n            //     const positionIndex = parseInt(row.querySelector('.position-input').value) || 0;\n            //     let columnIndex = csvData.headersObject[sourceSelect.value.trim()];\n            //     let sourceValue = previewRow[columnIndex-1] || '';\n            //     // Apply delimiter and position if provided\n            //     const parts = sourceValue.split(delimiter || null);\n            //     const position = parseInt(positionIndex) || 0;\n            //     sourceValue = parts.length > position ? parts[position].trim() : parts[0].trim();\n            //     tableHTML += `<td>${sourceValue || ''}</td>`;\n            // });\n            tableHTML += '</tr>';\n        });\n        tableHTML += '</tbody></table>';\n        $87e25a54f10bf52d$var$mapCsvPreview.innerHTML = tableHTML;\n    } catch (error) {\n        $87e25a54f10bf52d$var$errorMessage.textContent = `An error occurred: ${error.message}`;\n        $87e25a54f10bf52d$var$errorMessage.style.display = 'block';\n        alert(`An error occurred: ${error.message}`);\n        console.error('error: ', error);\n    }\n}\n// Template Selection\n$87e25a54f10bf52d$var$templateSearch.addEventListener('focus', ()=>{\n    // templateSearch.placeholder = 'Please input template name';\n    if ($87e25a54f10bf52d$var$templateSearch.placeholder === 'Please input template name') $87e25a54f10bf52d$var$templateSearch.placeholder = '';\n    else $87e25a54f10bf52d$var$templateOptions.style.display = 'block';\n});\n$87e25a54f10bf52d$var$templateSearch.addEventListener('input', ()=>{\n    $87e25a54f10bf52d$var$templateSearch.placeholder = 'Search for a template...';\n    const searchValue = $87e25a54f10bf52d$var$templateSearch.value.toLowerCase();\n    const items = $87e25a54f10bf52d$var$templateOptions.querySelectorAll('.dropdown-item');\n    items.forEach((item)=>{\n        const text = item.textContent.toLowerCase();\n        item.style.display = text.includes(searchValue) ? 'block' : 'none';\n    });\n    $87e25a54f10bf52d$var$templateOptions.style.display = 'block';\n});\ndocument.addEventListener('click', (e)=>{\n    if (!$87e25a54f10bf52d$var$templateSearch.contains(e.target) && !$87e25a54f10bf52d$var$templateOptions.contains(e.target)) $87e25a54f10bf52d$var$templateOptions.style.display = 'none';\n});\n$87e25a54f10bf52d$var$templateOptions.addEventListener('click', (e)=>{\n    if (e.target.classList.contains('dropdown-item')) {\n        const value = parseInt(e.target.getAttribute('data-value'));\n        // currentTemplate = value;\n        // selectedTemplate.textContent = `Selected template: ${e.target.textContent}`;\n        $87e25a54f10bf52d$var$templateSearch.value = e.target.textContent;\n        // templateSearch.placeholder = e.target.textContent;\n        $87e25a54f10bf52d$var$templateOptions.style.display = 'none';\n        $87e25a54f10bf52d$var$mappingConfig = ($87e25a54f10bf52d$var$savedConfigurations[value] || {}).mapping;\n        $87e25a54f10bf52d$var$updateFieldMappings();\n        $87e25a54f10bf52d$var$updateGenerateButtonState();\n        $87e25a54f10bf52d$var$displayMapCSVPreview();\n    }\n});\n// Field Mapping\nfunction $87e25a54f10bf52d$var$updateFieldMappings(newRow = false) {\n    if (!$87e25a54f10bf52d$var$csvData || !$87e25a54f10bf52d$var$csvData.rows || !$87e25a54f10bf52d$var$csvData.rows.length) {\n        $87e25a54f10bf52d$var$mappingTableBody.innerHTML = '<tr><td colspan=\"5\">No valid data found in the CSV file.</td></tr>';\n        return;\n    }\n    $87e25a54f10bf52d$var$mappingTableBody.innerHTML = '';\n    const fields = Object.keys($87e25a54f10bf52d$var$mappingConfig);\n    // const fields = templateFields[currentTemplate];\n    fields.forEach((field)=>{\n        $87e25a54f10bf52d$var$addNewRow(field);\n    });\n}\nfunction $87e25a54f10bf52d$var$addNewRow(field, firstRow = false) {\n    const fieldConfig = $87e25a54f10bf52d$var$mappingConfig[field];\n    // if (fieldConfig.columnName) {\n    //     const columnIndex = csvData.headersObject[fieldConfig.columnName];\n    //     if (columnIndex) {\n    //     let columnValue = row[columnIndex - 1];\n    //     // Apply delimiter and position if provided\n    //     const parts = value.split(fieldConfig.delimiter || null);\n    //     const position = parseInt(fieldConfig.position) || 0;\n    //     value = parts.length > position ? parts[position] : parts[0];\n    //     mappedRow[field] = value;\n    //     }\n    // }\n    const row = document.createElement('tr');\n    // Target Field\n    const targetCell = document.createElement('td');\n    targetCell.textContent = field.replace(/_/g, ' ');\n    row.appendChild(targetCell);\n    // Source Column\n    const sourceCell = document.createElement('td');\n    const sourceSelectDiv = document.createElement('div');\n    // const sourceSelect = document.createElement('select');\n    // sourceSelect.classList.add('source-select');\n    // sourceSelect.setAttribute('data-field', field);\n    sourceSelectDiv.classList.add('search-container-mapping');\n    sourceSelectDiv.setAttribute('data-field', field);\n    const sourceSelectInput = document.createElement('input');\n    sourceSelectInput.type = 'text';\n    sourceSelectInput.classList.add('search-input-mapping');\n    sourceSelectInput.placeholder = 'Search for a column...';\n    sourceSelectInput.value = fieldConfig.columnName;\n    sourceSelectDiv.appendChild(sourceSelectInput);\n    const sourceSelectDivDropdown = document.createElement('div');\n    sourceSelectDivDropdown.classList.add('searchable-dropdown');\n    sourceSelectDiv.appendChild(sourceSelectDivDropdown);\n    const sourceSelectDivDropdownContent = document.createElement('div');\n    sourceSelectDivDropdownContent.classList.add('dropdown-content');\n    sourceSelectDivDropdownContent.style.width = '200px';\n    sourceSelectDivDropdown.appendChild(sourceSelectDivDropdownContent);\n    // const defaultOption = document.createElement('option');\n    // defaultOption.value = '';\n    // defaultOption.textContent = '-- Select Source --';\n    // sourceSelect.appendChild(defaultOption);\n    $87e25a54f10bf52d$var$csvData.headers.forEach((header)=>{\n        const option = document.createElement('div');\n        option.classList.add('dropdown-item');\n        option.setAttribute('data-value', header);\n        option.textContent = header;\n        sourceSelectDivDropdownContent.appendChild(option);\n    // const option = document.createElement('option');\n    // option.value = header;\n    // option.textContent = header;\n    // sourceSelect.appendChild(option);\n    });\n    // sourceSelect.addEventListener('change', () => {\n    //     updatePreview(row);\n    //     updateGenerateButtonState();\n    // });\n    // Template Selection\n    sourceSelectInput.addEventListener('focus', ()=>{\n        sourceSelectDivDropdownContent.style.display = 'block';\n    });\n    sourceSelectInput.addEventListener('input', ()=>{\n        const searchValue = sourceSelectInput.value.toLowerCase().trim();\n        const items = sourceSelectDivDropdownContent.querySelectorAll('.dropdown-item');\n        items.forEach((item)=>{\n            const text = item.textContent.toLowerCase();\n            item.style.display = text.includes(searchValue) ? 'block' : 'none';\n        });\n        sourceSelectDivDropdownContent.style.display = 'block';\n        if (!searchValue) {\n            fieldConfig.columnName = searchValue;\n            $87e25a54f10bf52d$var$updatePreview(row, field);\n            $87e25a54f10bf52d$var$updateGenerateButtonState();\n        }\n    });\n    document.addEventListener('click', (e)=>{\n        if (!sourceSelectInput.contains(e.target) && !sourceSelectDivDropdownContent.contains(e.target)) sourceSelectDivDropdownContent.style.display = 'none';\n    });\n    sourceSelectDivDropdownContent.addEventListener('click', (e)=>{\n        if (e.target.classList.contains('dropdown-item')) {\n            // selectedTemplate.textContent = `Selected template: ${e.target.textContent}`;\n            sourceSelectInput.value = e.target.textContent;\n            fieldConfig.columnName = sourceSelectInput.value;\n            // sourceSelectInput.placeholder = e.target.textContent;\n            sourceSelectDivDropdownContent.style.display = 'none';\n            $87e25a54f10bf52d$var$updatePreview(row, field);\n            $87e25a54f10bf52d$var$updateGenerateButtonState();\n        }\n    });\n    sourceCell.appendChild(sourceSelectDiv);\n    row.appendChild(sourceCell);\n    // Delimiter\n    const delimiterCell = document.createElement('td');\n    const delimiterInput = document.createElement('input');\n    delimiterInput.type = 'text';\n    delimiterInput.classList.add('delimiter-input');\n    delimiterInput.placeholder = 'e.g. ,';\n    delimiterInput.value = fieldConfig.delimiter;\n    delimiterInput.addEventListener('input', ()=>{\n        fieldConfig.delimiter = delimiterInput.value;\n        $87e25a54f10bf52d$var$updatePreview(row, field);\n    });\n    delimiterCell.appendChild(delimiterInput);\n    row.appendChild(delimiterCell);\n    // Position Index\n    const positionCell = document.createElement('td');\n    const positionInput = document.createElement('input');\n    positionInput.type = 'number';\n    positionInput.min = '0';\n    positionInput.value = fieldConfig.position;\n    positionInput.classList.add('position-input');\n    positionInput.addEventListener('input', ()=>{\n        fieldConfig.position = parseInt(positionInput.value);\n        $87e25a54f10bf52d$var$updatePreview(row, field);\n    });\n    positionCell.appendChild(positionInput);\n    row.appendChild(positionCell);\n    // Preview\n    const previewCell = document.createElement('td');\n    previewCell.classList.add('preview-value');\n    previewCell.textContent = 'No preview available';\n    row.appendChild(previewCell);\n    if (firstRow) $87e25a54f10bf52d$var$mappingTableBody.prepend(row);\n    else $87e25a54f10bf52d$var$mappingTableBody.appendChild(row);\n    $87e25a54f10bf52d$var$updatePreview(row, field);\n}\nfunction $87e25a54f10bf52d$var$updatePreview(row, mapFieldKey) {\n    if (!$87e25a54f10bf52d$var$csvData || !$87e25a54f10bf52d$var$csvData.rows || !$87e25a54f10bf52d$var$csvData.rows.length) return;\n    $87e25a54f10bf52d$var$displayMapCSVPreview();\n    const sourceSelectInputValue = row.querySelector('.search-input-mapping').value;\n    const delimiter = row.querySelector('.delimiter-input').value;\n    const positionIndex = parseInt(row.querySelector('.position-input').value) || 0;\n    const previewCell = row.querySelector('.preview-value');\n    if (!sourceSelectInputValue) {\n        previewCell.textContent = 'No source selected';\n        return;\n    }\n    // Get first row for preview\n    const firstRow = $87e25a54f10bf52d$var$csvData.rows[0];\n    const columnIndex = $87e25a54f10bf52d$var$csvData.headersObject[sourceSelectInputValue];\n    if (!columnIndex) {\n        previewCell.textContent = 'Invalid source value';\n        return;\n    }\n    let sourceValue = firstRow[columnIndex - 1] || '';\n    if (!sourceValue) {\n        previewCell.textContent = 'No data available';\n        return;\n    }\n    // Apply delimiter and position if provided\n    const parts = sourceValue.split(delimiter || null);\n    const position = parseInt(positionIndex) || 0;\n    sourceValue = parts.length > position ? parts[position].trim() : \"\";\n    previewCell.textContent = sourceValue;\n// if (delimiter) {\n//     const parts = sourceValue.split(delimiter);\n//     if (positionIndex >= 0 && positionIndex < parts.length) {\n//         previewCell.textContent = parts[positionIndex].trim();\n//     } else {\n//         previewCell.textContent = `Invalid position (max: ${parts.length - 1})`;\n//     }\n// } else {\n//     previewCell.textContent = sourceValue;\n// }\n}\n// Generate Mapped CSV\n$87e25a54f10bf52d$var$generateButton.addEventListener('click', $87e25a54f10bf52d$var$generateMappedCSV);\nfunction $87e25a54f10bf52d$var$updateGenerateButtonState() {\n    const hasCSV = $87e25a54f10bf52d$var$csvData && $87e25a54f10bf52d$var$csvData.rows && $87e25a54f10bf52d$var$csvData.rows.length;\n    const hasMapping = $87e25a54f10bf52d$var$hasValidMappings();\n    $87e25a54f10bf52d$var$addMappingButton.disabled = !hasCSV;\n    $87e25a54f10bf52d$var$showPopupButton.disabled = !hasCSV;\n    $87e25a54f10bf52d$var$generateButton.disabled = !(hasCSV && hasMapping);\n}\nfunction $87e25a54f10bf52d$var$hasValidMappings() {\n    const items = document.querySelectorAll('.search-input-mapping');\n    let hasAtLeastOneMapping = false;\n    items.forEach((item)=>{\n        if (item.value.trim()) hasAtLeastOneMapping = true;\n    });\n    return hasAtLeastOneMapping;\n}\nfunction $87e25a54f10bf52d$var$generateMappedCSV() {\n    if (!$87e25a54f10bf52d$var$csvData || !$87e25a54f10bf52d$var$csvData.rows || !$87e25a54f10bf52d$var$csvData.rows.length) {\n        alert(\"Please upload a CSV file first\", \"error\");\n        return;\n    }\n    if (!$87e25a54f10bf52d$var$templateSearch.value.trim()) {\n        $87e25a54f10bf52d$var$templateSearch.focus();\n        $87e25a54f10bf52d$var$templateSearch.placeholder = 'Please input template name';\n        alert(\"Please provide a name for this template\", \"error\");\n        return;\n    }\n    try {\n        $87e25a54f10bf52d$var$errorMessage.style.display = 'none';\n        // const mappedData = [];\n        // Create headers row\n        // const fields = Object.keys(mappingConfig);\n        // Process each CSV row\n        // csvData.rows.forEach(csvRow => {\n        //     const mappedRow = {};\n        //     // Process each field mapping\n        //     const rows = mappingTableBody.querySelectorAll('tr');\n        //     rows.forEach((row, index) => {\n        //         const field = fields[index];\n        //         const sourceSelectInputValue = row.querySelector('.search-input-mapping').value || '';\n        //         const delimiter = row.querySelector('.delimiter-input').value;\n        //         const positionIndex = parseInt(row.querySelector('.position-input').value) || 0;\n        //         let columnIndex = csvData.headersObject[sourceSelectInputValue.trim()];\n        //         let sourceValue = csvRow[columnIndex-1] || '';\n        //         // Apply delimiter and position if provided\n        //         const parts = sourceValue.split(delimiter || null);\n        //         const position = parseInt(positionIndex) || 0;\n        //         sourceValue = parts.length > position ? parts[position].trim() : parts[0].trim();\n        //         mappedRow[field] = sourceValue;\n        //     });\n        //     mappedData.push(mappedRow);\n        // });\n        // Create CSV string\n        // let csvContent = fields.join(',') + '\\n';\n        // mappedData.forEach(row => {\n        //     const rowValues = fields.map(field => {\n        //         let value = row[field] || '';\n        //         // Escape quotes and wrap in quotes if needed\n        //         if (value.includes('\"') || value.includes(',')) {\n        //             value = '\"' + value.replace(/\"/g, '\"\"') + '\"';\n        //         }\n        //         return value;\n        //     });\n        //     csvContent += rowValues.join(',') + '\\n';\n        // });\n        const { headersObject: headersObject, rows: rows } = $87e25a54f10bf52d$var$csvData;\n        const dataRows = rows.map((row)=>{\n            const dataRow = [];\n            Object.keys($87e25a54f10bf52d$var$mappingConfig).forEach((field)=>{\n                const fieldConfig = $87e25a54f10bf52d$var$mappingConfig[field];\n                const columnIndex = headersObject[fieldConfig.columnName];\n                let value = row[columnIndex - 1] || '';\n                // Apply delimiter and position if provided\n                const parts = value.split(fieldConfig.delimiter || null);\n                const position = parseInt(fieldConfig.position) || 0;\n                value = parts.length > position ? parts[position].trim() : '';\n                dataRow.push(value);\n            // if (fieldConfig.columnName) {\n            // const columnIndex = headersObject[fieldConfig.columnName];\n            // if (columnIndex) {\n            //     let value = row[columnIndex - 1];\n            //     // Apply delimiter and position if provided\n            //     const parts = value.split(fieldConfig.delimiter || null);\n            //     const position = parseInt(fieldConfig.position) || 0;\n            //     value = parts.length > position ? parts[position] : parts[0];\n            //     dataRow.push(value);\n            // } else {\n            //     dataRow.push('');\n            // }\n            // } else {\n            // dataRow.push('');\n            // }\n            });\n            return dataRow.join(\",\");\n        });\n        // Convert to CSV format\n        const csvString = [\n            Object.keys($87e25a54f10bf52d$var$mappingConfig).join(\",\"),\n            ...dataRows\n        ].join(\"\\n\");\n        // Create download link\n        const blob = new Blob([\n            csvString\n        ], {\n            type: 'text/csv'\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `mapped_${$87e25a54f10bf52d$var$filename}`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        // successMessage.style.display = 'block';\n        // setTimeout(() => {\n        //     successMessage.style.display = 'none';\n        // }, 5000);\n        $87e25a54f10bf52d$var$updateConfig();\n    } catch (error) {\n        $87e25a54f10bf52d$var$errorMessage.textContent = `An error occurred: ${error.message}`;\n        $87e25a54f10bf52d$var$errorMessage.style.display = 'block';\n        alert(`An error occurred: ${error.message}`);\n        console.error('error: ', error);\n    }\n}\nfunction $87e25a54f10bf52d$var$updateConfig() {\n    // Create a unique signature for this CSV structure based on headers\n    const headerSignature = $87e25a54f10bf52d$var$availableColumns.sort().join(',');\n    // Check if configuration with this name already exists\n    const existingConfigIndex = $87e25a54f10bf52d$var$savedConfigurations.findIndex((config)=>config.name === $87e25a54f10bf52d$var$templateSearch.value.trim());\n    const newConfig = {\n        name: $87e25a54f10bf52d$var$templateSearch.value.trim(),\n        mapping: $87e25a54f10bf52d$var$mappingConfig,\n        headerSignature: headerSignature,\n        createdAt: new Date().toISOString()\n    };\n    let updatedConfigs;\n    if (existingConfigIndex >= 0) {\n        // Update existing configuration\n        updatedConfigs = [\n            ...$87e25a54f10bf52d$var$savedConfigurations\n        ];\n        updatedConfigs[existingConfigIndex] = newConfig;\n    // alert(`Configuration \"${templateSearch.value}\" updated successfully`);\n    } else // Add new configuration\n    updatedConfigs = [\n        ...$87e25a54f10bf52d$var$savedConfigurations,\n        newConfig\n    ];\n    $87e25a54f10bf52d$var$savedConfigurations = updatedConfigs;\n    localStorage.setItem('csvMappingConfigurations', JSON.stringify(updatedConfigs));\n}\nwindow.addEventListener(\"load\", ()=>{\n    try {\n        const savedConfigs = localStorage.getItem('csvMappingConfigurations');\n        if (savedConfigs) {\n            $87e25a54f10bf52d$var$savedConfigurations = JSON.parse(savedConfigs);\n            $87e25a54f10bf52d$var$savedConfigurations && $87e25a54f10bf52d$var$savedConfigurations.forEach((config, index)=>{\n                const configSelectDiv = document.createElement('div');\n                configSelectDiv.classList.add('dropdown-item');\n                configSelectDiv.setAttribute('data-value', index);\n                configSelectDiv.textContent = config.name;\n                $87e25a54f10bf52d$var$templateOptions.appendChild(configSelectDiv);\n            });\n        }\n    } catch (err) {\n        alert(`An error occurred: ${err.message}`);\n        console.error('error: ', err);\n    }\n});\nconst $87e25a54f10bf52d$var$showPopupButton = document.getElementById('showPopupButton');\nconst $87e25a54f10bf52d$var$popupContainer = document.getElementById('myPopup');\nconst $87e25a54f10bf52d$var$popupInput = document.getElementById('popupInput');\n$87e25a54f10bf52d$var$showPopupButton.addEventListener('click', ()=>{\n    $87e25a54f10bf52d$var$popupContainer.style.display = 'flex';\n    $87e25a54f10bf52d$var$popupInput.focus();\n});\n$87e25a54f10bf52d$var$addMappingButton.addEventListener('click', ()=>{\n    $87e25a54f10bf52d$var$popupContainer.style.display = 'none';\n    const fieldName = $87e25a54f10bf52d$var$popupInput.value;\n    $87e25a54f10bf52d$var$mappingConfig[fieldName] = {\n        columnName: \"\",\n        delimiter: \"\",\n        position: 0\n    };\n    $87e25a54f10bf52d$var$defaultTemplate[fieldName] = {\n        columnNames: [],\n        delimiter: \"\",\n        position: 0\n    };\n    $87e25a54f10bf52d$var$addNewRow(fieldName, true);\n    $87e25a54f10bf52d$var$popupInput.value = \"\"; //reset the input field after closing.\n});\nwindow.addEventListener('click', (event)=>{\n    if (event.target === $87e25a54f10bf52d$var$popupContainer) {\n        $87e25a54f10bf52d$var$popupContainer.style.display = 'none';\n        $87e25a54f10bf52d$var$popupInput.value = \"\";\n    }\n});\n\n\n//# sourceMappingURL=dataformatters.github.io.999053fa.js.map\n","\n// DOM Elements\nconst fileUploadArea = document.getElementById('fileUploadArea');\nconst csvFileInput = document.getElementById('csvFile');\nconst fileStatus = document.getElementById('fileStatus');\nconst csvPreview = document.getElementById('csvPreview');\nconst mapCsvPreview = document.getElementById('mapCsvPreview');\nconst templateSearch = document.getElementById('templateSearch');\nconst templateSearchDiv = document.getElementById('templateSearchDiv');\nconst templateOptions = document.getElementById('templateOptions');\n// const selectedTemplate = document.getElementById('selectedTemplate');\nconst mappingTableBody = document.getElementById('mappingTableBody');\nconst generateButton = document.getElementById('generateButton');\nconst addMappingButton = document.getElementById('addMappingButton');\n// const successMessage = document.getElementById('successMessage');\nconst errorMessage = document.getElementById('errorMessage');\n\n// State variables\nlet mappingConfig = {\n    firstname: { columnName: \"\", delimiter: \"\", position: 0 },\n    lastname: { columnName: \"\", delimiter: \"\", position: 0 },\n    memberid: { columnName: \"\", delimiter: \"\", position: 0 },\n    gender: { columnName: \"\", delimiter: \"\", position: 0 },\n    dob: { columnName: \"\", delimiter: \"\", position: 0 },\n    pickuptime: { columnName: \"\", delimiter: \"\", position: 0 },\n    dropofftime: { columnName: \"\", delimiter: \"\", position: 0 },\n    tollsamt: { columnName: \"\", delimiter: \"\", position: 0 },\n    congestionfee: { columnName: \"\", delimiter: \"\", position: 0 },\n    mileage: { columnName: \"\", delimiter: \"\", position: 0 },\n    servicetype: { columnName: \"\", delimiter: \"\", position: 0 },\n    authorization: { columnName: \"\", delimiter: \"\", position: 0 },\n    puaddress: { columnName: \"\", delimiter: \"\", position: 0 },\n    pucity: { columnName: \"\", delimiter: \"\", position: 0 },\n    pustate: { columnName: \"\", delimiter: \"\", position: 0 },\n    pickupzip: { columnName: \"\", delimiter: \"\", position: 0 },\n    doaddress: { columnName: \"\", delimiter: \"\", position: 0 },\n    docity: { columnName: \"\", delimiter: \"\", position: 0 },\n    dostate: { columnName: \"\", delimiter: \"\", position: 0 },\n    dropoffzip: { columnName: \"\", delimiter: \"\", position: 0 },\n};\n\nlet filename = '';\nlet savedConfigurations = [];\nlet isProcessing = false;\nlet availableColumns = [];\nlet availableColumnsObject = {};\nlet previewRows = [];\nlet csvData = null;\nlet csvHeaders = [];\nlet currentTemplate = null;\n// let templateFields = {\n//     customer: ['Customer ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Address'],\n//     product: ['Product ID', 'Product Name', 'Category', 'Price', 'Stock', 'Description'],\n//     inventory: ['Item ID', 'Item Name', 'Quantity', 'Location', 'Last Updated', 'Status'],\n//     sales: ['Order ID', 'Customer', 'Product', 'Quantity', 'Price', 'Date'],\n//     employee: ['Employee ID', 'Name', 'Department', 'Position', 'Hire Date', 'Salary']\n// };\n// Default template for auto-mapping\nconst defaultTemplate = {\n    firstname: { columnNames: [], delimiter: \"\", position: 0 },\n    lastname: { columnNames: [], delimiter: \"\", position: 0 },\n    memberid: { columnNames: [], delimiter: \"\", position: 0 },\n    gender: { columnNames: [], delimiter: \"\", position: 0 },\n    dob: { columnNames: [], delimiter: \"\", position: 0 },\n    pickuptime: { columnNames: [], delimiter: \"\", position: 0 },\n    dropofftime: { columnNames: [], delimiter: \"\", position: 0 },\n    tollsamt: { columnNames: [], delimiter: \"\", position: 0 },\n    congestionfee: { columnNames: [], delimiter: \"\", position: 0 },\n    mileage: { columnNames: [], delimiter: \"\", position: 0 },\n    servicetype: { columnNames: [], delimiter: \"\", position: 0 },\n    authorization: { columnNames: [], delimiter: \"\", position: 0 },\n    puaddress: { columnNames: [], delimiter: \"\", position: 0 },\n    pucity: { columnNames: [], delimiter: \"\", position: 0 },\n    pustate: { columnNames: [], delimiter: \"\", position: 0 },\n    pickupzip: { columnNames: [], delimiter: \"\", position: 0 },\n    doaddress: { columnNames: [], delimiter: \"\", position: 0 },\n    docity: { columnNames: [], delimiter: \"\", position: 0 },\n    dostate: { columnNames: [], delimiter: \"\", position: 0 },\n    dropoffzip: { columnNames: [], delimiter: \"\", position: 0 },\n};\n\n// File Upload Handling\nfileUploadArea.addEventListener('dragover', (e) => {\n    e.preventDefault();\n    fileUploadArea.style.borderColor = '#4299e1';\n    fileUploadArea.style.backgroundColor = '#e6f7ff';\n});\n\nfileUploadArea.addEventListener('dragleave', () => {\n    fileUploadArea.style.borderColor = '#cbd5e0';\n    fileUploadArea.style.backgroundColor = '#ebf8ff';\n});\n\nfileUploadArea.addEventListener('drop', (e) => {\n    e.preventDefault();\n    fileUploadArea.style.borderColor = '#cbd5e0';\n    fileUploadArea.style.backgroundColor = '#ebf8ff';\n\n    if (e.dataTransfer.files.length) {\n        csvFileInput.files = e.dataTransfer.files;\n        handleFileUpload();\n    }\n});\n\ncsvFileInput.addEventListener('change', handleFileUpload);\n\nfunction handleFileUpload() {\n    const file = csvFileInput.files[0];\n\n    if (file && file.type === 'text/csv') {\n        filename = file.name;\n        fileStatus.textContent = `File selected: ${file.name}`;\n        // templateSearchDiv.style.marginTop = '-635px';\n\n        const reader = new FileReader();\n        reader.onload = function (e) {\n            processCSV(e.target.result);\n        };\n        reader.readAsText(file);\n    } else {\n        filename = '';\n        // templateSearchDiv.style.marginTop = '-390px';\n        fileStatus.textContent = 'Please select a valid CSV file.';\n        csvPreview.innerHTML = '<p>CSV preview will appear here after uploading a file.</p>';\n        mapCsvPreview.innerHTML = '<p>Mapped Data Preview (First 2 Rows) will appear here after configuring the mapping.</p>';\n        csvData = null;\n        csvHeaders = [];\n        updateGenerateButtonState();\n    }\n}\n\nfunction processCSV(csvText) {\n    try {\n        isProcessing = true;\n        // Simple CSV parsing\n        const rows = csvText.split(\"\\n\").filter(row => row.trim());\n        const headers = rows[0].split(\",\").map(header => header.trim());\n        availableColumns = headers;\n\n        const headersObject = {};\n        headers.forEach((header, index) => {\n            headersObject[header] = index + 1;\n        });\n        availableColumnsObject = headersObject;\n\n\n        const dataRows = rows.slice(1).map(row =>\n            row.split(\",\").map(cell => cell.trim())\n        );\n\n        // preview rows (first 2 data rows)\n        previewRows = dataRows.slice(0, 2);\n        csvData = { headers, headersObject, rows: dataRows };\n\n        // for (let i = 1; i < lines.length; i++) {\n        //     if (lines[i].trim() === '') continue;\n\n        //     // Handle commas in quoted fields\n        //     let row = [];\n        //     let inQuotes = false;\n        //     let currentField = '';\n\n        //     for (let j = 0; j < lines[i].length; j++) {\n        //         const char = lines[i][j];\n\n        //         if (char === '\"') {\n        //             inQuotes = !inQuotes;\n        //         } else if (char === ',' && !inQuotes) {\n        //             row.push(currentField.trim().replace(/\"/g, ''));\n        //             currentField = '';\n        //         } else {\n        //             currentField += char;\n        //         }\n        //     }\n\n        //     row.push(currentField.trim().replace(/\"/g, ''));\n\n        //     if (row.length === headers.length) {\n        //         const rowObj = {};\n        //         headers.forEach((header, index) => {\n        //             rowObj[header] = row[index];\n        //         });\n        //         csvData.push(rowObj);\n        //     }\n        // }\n        // Check if there's a matching saved configuration\n        const headerSignature = headers.sort().join(',');\n        const matchingConfig = savedConfigurations.find(config => config.headerSignature === headerSignature);\n\n        if (matchingConfig) {\n            mappingConfig = matchingConfig.mapping;\n            templateSearch.value = matchingConfig.name;\n            // alert(`Configuration \"${matchingConfig.name}\" automatically applied`, \"success\");\n        } else {\n            // Try auto-mapping based on the default template\n            // Try auto-mapping based on the default template\n            const initialMapping = { ...mappingConfig };\n            Object.keys(initialMapping).forEach(field => {\n                const fieldTemplate = defaultTemplate[field];\n\n                // Look for column name matches\n                const columnName = fieldTemplate.columnNames.find(name => headersObject[name]);\n\n                if (columnName) {\n                    initialMapping[field] = {\n                        columnName: columnName || '',\n                        delimiter: \"\",\n                        position: 0\n                    };\n                }\n            });\n\n            mappingConfig = initialMapping;\n        }\n        displayCSVPreview();\n        updateFieldMappings();\n        updateGenerateButtonState();\n        displayMapCSVPreview();\n        isProcessing = false;\n    } catch (error) {\n        alert(\"Error processing CSV file. Please check the format.\", error.message);\n        isProcessing = false;\n        console.error('error: ', error);\n    }\n\n}\n\nfunction displayCSVPreview() {\n    if (!previewRows || !previewRows.length || !csvData || !csvData.headers || !csvData.headers.length) {\n        csvPreview.innerHTML = '<p>No valid data found in the CSV file.</p>';\n        return;\n    }\n\n    let tableHTML = '<p>Original Data (First 2 Rows)</p><table><thead><tr>';\n    const uploadCsvHeaders = Object.keys(csvData.headersObject);\n    uploadCsvHeaders.forEach(header => {\n        tableHTML += `<th>${header}</th>`;\n    });\n    tableHTML += '</tr></thead><tbody>';\n\n    // Show first 2 rows only for preview\n    previewRows.forEach(row => {\n        tableHTML += '<tr>';\n        uploadCsvHeaders.forEach(header => {\n            tableHTML += `<td>${row[csvData.headersObject[header] - 1] || ''}</td>`;\n        });\n        tableHTML += '</tr>';\n    });\n\n    tableHTML += '</tbody></table>';\n    csvPreview.innerHTML = tableHTML;\n}\n\nfunction displayMapCSVPreview() {\n    if (!previewRows || !previewRows.length || !csvData || !csvData.headers || !csvData.headers.length || !hasValidMappings()) {\n        mapCsvPreview.innerHTML = '<p>Mapped Data Preview (First 2 Rows) will appear here after configuring the mapping.</p>';\n        return;\n    }\n    try {\n        errorMessage.style.display = 'none';\n\n        const mappedData = [];\n\n        // Create headers row\n        // const fields = templateFields[currentTemplate];\n        const fields = Object.keys(mappingConfig);\n        let tableHTML = '<p>Mapped Data (First 2 Rows)</p><table><thead><tr>';\n        fields.forEach(header => {\n            tableHTML += `<th>${header.replace(/_/g, ' ')}</th>`;\n        });\n        tableHTML += '</tr></thead><tbody>';\n\n        // Show first 2 rows only for preview\n        previewRows.forEach(previewRow => {\n            tableHTML += '<tr>';\n            fields.forEach(field => {\n                const fieldConfig = mappingConfig[field];\n                const columnIndex = csvData.headersObject[fieldConfig.columnName];\n                let value = previewRow[columnIndex - 1] || '';\n\n                // Apply delimiter and position if provided\n                const parts = value.split(fieldConfig.delimiter || null);\n                const position = parseInt(fieldConfig.position) || 0;\n                value = parts.length > position ? parts[position].trim() : '';\n                tableHTML += `<td>${value || ''}</td>`;\n            });\n            // Process each field mapping\n            // const rows = mappingTableBody.querySelectorAll('tr');\n            // rows.forEach((row, index) => {\n            //     const sourceSelect = row.querySelector('.search-input-mapping');\n            //     const delimiter = row.querySelector('.delimiter-input').value;\n            //     const positionIndex = parseInt(row.querySelector('.position-input').value) || 0;\n            //     let columnIndex = csvData.headersObject[sourceSelect.value.trim()];\n            //     let sourceValue = previewRow[columnIndex-1] || '';\n\n            //     // Apply delimiter and position if provided\n            //     const parts = sourceValue.split(delimiter || null);\n            //     const position = parseInt(positionIndex) || 0;\n            //     sourceValue = parts.length > position ? parts[position].trim() : parts[0].trim();\n            //     tableHTML += `<td>${sourceValue || ''}</td>`;\n            // });\n            tableHTML += '</tr>';\n        });\n        tableHTML += '</tbody></table>';\n        mapCsvPreview.innerHTML = tableHTML;\n    } catch (error) {\n        errorMessage.textContent = `An error occurred: ${error.message}`;\n        errorMessage.style.display = 'block';\n        alert(`An error occurred: ${error.message}`);\n        console.error('error: ', error);\n    }\n}\n\n// Template Selection\ntemplateSearch.addEventListener('focus', () => {\n\n    // templateSearch.placeholder = 'Please input template name';\n    if (templateSearch.placeholder === 'Please input template name') {\n        templateSearch.placeholder = '';\n    } else templateOptions.style.display = 'block';\n});\n\ntemplateSearch.addEventListener('input', () => {\n    templateSearch.placeholder = 'Search for a template...';\n    const searchValue = templateSearch.value.toLowerCase();\n    const items = templateOptions.querySelectorAll('.dropdown-item');\n\n    items.forEach(item => {\n        const text = item.textContent.toLowerCase();\n        item.style.display = text.includes(searchValue) ? 'block' : 'none';\n    });\n\n    templateOptions.style.display = 'block';\n});\n\ndocument.addEventListener('click', (e) => {\n    if (!templateSearch.contains(e.target) && !templateOptions.contains(e.target)) {\n        templateOptions.style.display = 'none';\n    }\n});\n\ntemplateOptions.addEventListener('click', (e) => {\n    if (e.target.classList.contains('dropdown-item')) {\n        const value = parseInt(e.target.getAttribute('data-value'));\n        // currentTemplate = value;\n        // selectedTemplate.textContent = `Selected template: ${e.target.textContent}`;\n        templateSearch.value = e.target.textContent;\n        // templateSearch.placeholder = e.target.textContent;\n        templateOptions.style.display = 'none';\n        mappingConfig = (savedConfigurations[value] || {}).mapping;\n        updateFieldMappings();\n        updateGenerateButtonState();\n        displayMapCSVPreview();\n    }\n});\n\n// Field Mapping\nfunction updateFieldMappings(newRow = false) {\n    if (!csvData || !csvData.rows || !csvData.rows.length) {\n        mappingTableBody.innerHTML = '<tr><td colspan=\"5\">No valid data found in the CSV file.</td></tr>';\n        return;\n    }\n\n    mappingTableBody.innerHTML = '';\n    const fields = Object.keys(mappingConfig);\n    // const fields = templateFields[currentTemplate];\n\n    fields.forEach(field => {\n        addNewRow(field);\n    });\n}\n\nfunction addNewRow(field, firstRow = false) {\n    const fieldConfig = mappingConfig[field];\n\n    // if (fieldConfig.columnName) {\n    //     const columnIndex = csvData.headersObject[fieldConfig.columnName];\n    //     if (columnIndex) {\n    //     let columnValue = row[columnIndex - 1];\n\n    //     // Apply delimiter and position if provided\n    //     const parts = value.split(fieldConfig.delimiter || null);\n    //     const position = parseInt(fieldConfig.position) || 0;\n    //     value = parts.length > position ? parts[position] : parts[0];\n    //     mappedRow[field] = value;\n    //     }\n    // }\n\n\n    const row = document.createElement('tr');\n\n    // Target Field\n    const targetCell = document.createElement('td');\n    targetCell.textContent = field.replace(/_/g, ' ');\n    row.appendChild(targetCell);\n\n    // Source Column\n    const sourceCell = document.createElement('td');\n    const sourceSelectDiv = document.createElement('div');\n    // const sourceSelect = document.createElement('select');\n    // sourceSelect.classList.add('source-select');\n    // sourceSelect.setAttribute('data-field', field);\n    sourceSelectDiv.classList.add('search-container-mapping');\n    sourceSelectDiv.setAttribute('data-field', field);\n    const sourceSelectInput = document.createElement('input');\n    sourceSelectInput.type = 'text';\n    sourceSelectInput.classList.add('search-input-mapping');\n    sourceSelectInput.placeholder = 'Search for a column...';\n    sourceSelectInput.value = fieldConfig.columnName;\n    sourceSelectDiv.appendChild(sourceSelectInput);\n\n    const sourceSelectDivDropdown = document.createElement('div');\n    sourceSelectDivDropdown.classList.add('searchable-dropdown');\n    sourceSelectDiv.appendChild(sourceSelectDivDropdown);\n\n    const sourceSelectDivDropdownContent = document.createElement('div');\n    sourceSelectDivDropdownContent.classList.add('dropdown-content');\n    sourceSelectDivDropdownContent.style.width = '200px';\n    sourceSelectDivDropdown.appendChild(sourceSelectDivDropdownContent);\n\n    // const defaultOption = document.createElement('option');\n    // defaultOption.value = '';\n    // defaultOption.textContent = '-- Select Source --';\n    // sourceSelect.appendChild(defaultOption);\n\n    csvData.headers.forEach(header => {\n        const option = document.createElement('div');\n        option.classList.add('dropdown-item');\n        option.setAttribute('data-value', header);\n        option.textContent = header;\n        sourceSelectDivDropdownContent.appendChild(option);\n\n        // const option = document.createElement('option');\n        // option.value = header;\n        // option.textContent = header;\n        // sourceSelect.appendChild(option);\n    });\n\n    // sourceSelect.addEventListener('change', () => {\n    //     updatePreview(row);\n    //     updateGenerateButtonState();\n    // });\n    // Template Selection\n    sourceSelectInput.addEventListener('focus', () => {\n        sourceSelectDivDropdownContent.style.display = 'block';\n    });\n\n    sourceSelectInput.addEventListener('input', () => {\n        const searchValue = sourceSelectInput.value.toLowerCase().trim();\n        const items = sourceSelectDivDropdownContent.querySelectorAll('.dropdown-item');\n\n        items.forEach(item => {\n            const text = item.textContent.toLowerCase();\n            item.style.display = text.includes(searchValue) ? 'block' : 'none';\n        });\n\n        sourceSelectDivDropdownContent.style.display = 'block';\n        if (!searchValue) {\n            fieldConfig.columnName = searchValue;\n            updatePreview(row, field);\n            updateGenerateButtonState();\n        }\n    });\n\n    document.addEventListener('click', (e) => {\n        if (!sourceSelectInput.contains(e.target) && !sourceSelectDivDropdownContent.contains(e.target)) {\n            sourceSelectDivDropdownContent.style.display = 'none';\n        }\n    });\n\n    sourceSelectDivDropdownContent.addEventListener('click', (e) => {\n        if (e.target.classList.contains('dropdown-item')) {\n            // selectedTemplate.textContent = `Selected template: ${e.target.textContent}`;\n            sourceSelectInput.value = e.target.textContent;\n            fieldConfig.columnName = sourceSelectInput.value;\n            // sourceSelectInput.placeholder = e.target.textContent;\n            sourceSelectDivDropdownContent.style.display = 'none';\n            updatePreview(row, field);\n            updateGenerateButtonState();\n        }\n    });\n\n    sourceCell.appendChild(sourceSelectDiv);\n    row.appendChild(sourceCell);\n\n    // Delimiter\n    const delimiterCell = document.createElement('td');\n    const delimiterInput = document.createElement('input');\n    delimiterInput.type = 'text';\n    delimiterInput.classList.add('delimiter-input');\n    delimiterInput.placeholder = 'e.g. ,';\n    delimiterInput.value = fieldConfig.delimiter;\n    delimiterInput.addEventListener('input', () => {\n        fieldConfig.delimiter = delimiterInput.value;\n        updatePreview(row, field);\n    });\n    delimiterCell.appendChild(delimiterInput);\n    row.appendChild(delimiterCell);\n\n    // Position Index\n    const positionCell = document.createElement('td');\n    const positionInput = document.createElement('input');\n    positionInput.type = 'number';\n    positionInput.min = '0';\n    positionInput.value = fieldConfig.position;\n    positionInput.classList.add('position-input');\n    positionInput.addEventListener('input', () => {\n        fieldConfig.position = parseInt(positionInput.value);\n        updatePreview(row, field);\n    });\n    positionCell.appendChild(positionInput);\n    row.appendChild(positionCell);\n\n    // Preview\n    const previewCell = document.createElement('td');\n    previewCell.classList.add('preview-value');\n    previewCell.textContent = 'No preview available';\n    row.appendChild(previewCell);\n\n    if (firstRow) mappingTableBody.prepend(row);\n    else mappingTableBody.appendChild(row);\n    updatePreview(row, field);\n}\n\nfunction updatePreview(row, mapFieldKey) {\n    if (!csvData || !csvData.rows || !csvData.rows.length) return;\n    displayMapCSVPreview();\n    const sourceSelectInputValue = row.querySelector('.search-input-mapping').value;\n    const delimiter = row.querySelector('.delimiter-input').value;\n    const positionIndex = parseInt(row.querySelector('.position-input').value) || 0;\n    const previewCell = row.querySelector('.preview-value');\n\n    if (!sourceSelectInputValue) {\n        previewCell.textContent = 'No source selected';\n        return;\n    }\n\n    // Get first row for preview\n    const firstRow = csvData.rows[0];\n    const columnIndex = csvData.headersObject[sourceSelectInputValue];\n    if (!columnIndex) {\n        previewCell.textContent = 'Invalid source value';\n        return;\n    }\n    let sourceValue = firstRow[columnIndex - 1] || '';\n\n    if (!sourceValue) {\n        previewCell.textContent = 'No data available';\n        return;\n    }\n\n    // Apply delimiter and position if provided\n    const parts = sourceValue.split(delimiter || null);\n    const position = parseInt(positionIndex) || 0;\n    sourceValue = parts.length > position ? parts[position].trim() : \"\";\n    previewCell.textContent = sourceValue;\n    // if (delimiter) {\n    //     const parts = sourceValue.split(delimiter);\n    //     if (positionIndex >= 0 && positionIndex < parts.length) {\n    //         previewCell.textContent = parts[positionIndex].trim();\n    //     } else {\n    //         previewCell.textContent = `Invalid position (max: ${parts.length - 1})`;\n    //     }\n    // } else {\n    //     previewCell.textContent = sourceValue;\n    // }\n}\n\n// Generate Mapped CSV\ngenerateButton.addEventListener('click', generateMappedCSV);\n\nfunction updateGenerateButtonState() {\n    const hasCSV = csvData && csvData.rows && csvData.rows.length;\n    const hasMapping = hasValidMappings();\n    addMappingButton.disabled = !hasCSV;\n    showPopupButton.disabled = !hasCSV;\n    generateButton.disabled = !(hasCSV && hasMapping);\n}\n\nfunction hasValidMappings() {\n    const items = document.querySelectorAll('.search-input-mapping');\n    let hasAtLeastOneMapping = false;\n    items.forEach(item => {\n        if (item.value.trim()) {\n            hasAtLeastOneMapping = true;\n        }\n    });\n\n    return hasAtLeastOneMapping;\n}\n\nfunction generateMappedCSV() {\n    if (!csvData || !csvData.rows || !csvData.rows.length) {\n        alert(\"Please upload a CSV file first\", \"error\");\n        return;\n    }\n    if (!templateSearch.value.trim()) {\n        templateSearch.focus();\n        templateSearch.placeholder = 'Please input template name';\n        alert(\"Please provide a name for this template\", \"error\");\n        return;\n    }\n    try {\n        errorMessage.style.display = 'none';\n\n        // const mappedData = [];\n\n        // Create headers row\n        // const fields = Object.keys(mappingConfig);\n\n        // Process each CSV row\n        // csvData.rows.forEach(csvRow => {\n        //     const mappedRow = {};\n\n        //     // Process each field mapping\n        //     const rows = mappingTableBody.querySelectorAll('tr');\n        //     rows.forEach((row, index) => {\n        //         const field = fields[index];\n        //         const sourceSelectInputValue = row.querySelector('.search-input-mapping').value || '';\n        //         const delimiter = row.querySelector('.delimiter-input').value;\n        //         const positionIndex = parseInt(row.querySelector('.position-input').value) || 0;\n\n        //         let columnIndex = csvData.headersObject[sourceSelectInputValue.trim()];\n        //         let sourceValue = csvRow[columnIndex-1] || '';\n\n        //         // Apply delimiter and position if provided\n        //         const parts = sourceValue.split(delimiter || null);\n        //         const position = parseInt(positionIndex) || 0;\n        //         sourceValue = parts.length > position ? parts[position].trim() : parts[0].trim();\n        //         mappedRow[field] = sourceValue;\n        //     });\n\n        //     mappedData.push(mappedRow);\n        // });\n\n        // Create CSV string\n        // let csvContent = fields.join(',') + '\\n';\n\n        // mappedData.forEach(row => {\n        //     const rowValues = fields.map(field => {\n        //         let value = row[field] || '';\n        //         // Escape quotes and wrap in quotes if needed\n        //         if (value.includes('\"') || value.includes(',')) {\n        //             value = '\"' + value.replace(/\"/g, '\"\"') + '\"';\n        //         }\n        //         return value;\n        //     });\n        //     csvContent += rowValues.join(',') + '\\n';\n        // });\n\n        const { headersObject, rows } = csvData;\n        const dataRows = rows.map(row => {\n            const dataRow = [];\n\n            Object.keys(mappingConfig).forEach(field => {\n                const fieldConfig = mappingConfig[field];\n                const columnIndex = headersObject[fieldConfig.columnName];\n                let value = row[columnIndex - 1] || '';\n\n                // Apply delimiter and position if provided\n                const parts = value.split(fieldConfig.delimiter || null);\n                const position = parseInt(fieldConfig.position) || 0;\n                value = parts.length > position ? parts[position].trim() : '';\n                dataRow.push(value);\n\n                // if (fieldConfig.columnName) {\n                // const columnIndex = headersObject[fieldConfig.columnName];\n                // if (columnIndex) {\n                //     let value = row[columnIndex - 1];\n\n                //     // Apply delimiter and position if provided\n                //     const parts = value.split(fieldConfig.delimiter || null);\n                //     const position = parseInt(fieldConfig.position) || 0;\n                //     value = parts.length > position ? parts[position] : parts[0];\n                //     dataRow.push(value);\n                // } else {\n                //     dataRow.push('');\n                // }\n                // } else {\n                // dataRow.push('');\n                // }\n            });\n            return dataRow.join(\",\");\n        });\n\n        // Convert to CSV format\n        const csvString = [\n            Object.keys(mappingConfig).join(\",\"),\n            ...dataRows,\n        ].join(\"\\n\");\n\n        // Create download link\n        const blob = new Blob([csvString], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `mapped_${filename}`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n        // successMessage.style.display = 'block';\n        // setTimeout(() => {\n        //     successMessage.style.display = 'none';\n        // }, 5000);\n        updateConfig();\n\n    } catch (error) {\n        errorMessage.textContent = `An error occurred: ${error.message}`;\n        errorMessage.style.display = 'block';\n        alert(`An error occurred: ${error.message}`);\n        console.error('error: ', error);\n    }\n}\nfunction updateConfig() {\n    // Create a unique signature for this CSV structure based on headers\n    const headerSignature = availableColumns.sort().join(',');\n    // Check if configuration with this name already exists\n    const existingConfigIndex = savedConfigurations.findIndex(\n        config => config.name === templateSearch.value.trim()\n    );\n\n    const newConfig = {\n        name: templateSearch.value.trim(),\n        mapping: mappingConfig,\n        headerSignature,\n        createdAt: new Date().toISOString()\n    };\n\n    let updatedConfigs;\n\n    if (existingConfigIndex >= 0) {\n        // Update existing configuration\n        updatedConfigs = [...savedConfigurations];\n        updatedConfigs[existingConfigIndex] = newConfig;\n        // alert(`Configuration \"${templateSearch.value}\" updated successfully`);\n    } else {\n        // Add new configuration\n        updatedConfigs = [...savedConfigurations, newConfig];\n        // alert(`Configuration \"${templateSearch.value}\" saved successfully`);\n    }\n\n    savedConfigurations = updatedConfigs;\n    localStorage.setItem('csvMappingConfigurations', JSON.stringify(updatedConfigs));\n}\n\nwindow.addEventListener(\"load\", () => {\n    try {\n        const savedConfigs = localStorage.getItem('csvMappingConfigurations');\n        if (savedConfigs) {\n            savedConfigurations = JSON.parse(savedConfigs);\n            savedConfigurations && savedConfigurations.forEach((config, index) => {\n                const configSelectDiv = document.createElement('div');\n                configSelectDiv.classList.add('dropdown-item');\n                configSelectDiv.setAttribute('data-value', index);\n                configSelectDiv.textContent = config.name;\n                templateOptions.appendChild(configSelectDiv);\n            });\n        }\n    } catch (err) {\n        alert(`An error occurred: ${err.message}`);\n        console.error('error: ', err);\n    }\n});\n\nconst showPopupButton = document.getElementById('showPopupButton');\nconst popupContainer = document.getElementById('myPopup');\nconst popupInput = document.getElementById('popupInput');\n\nshowPopupButton.addEventListener('click', () => {\n    popupContainer.style.display = 'flex';\n    popupInput.focus();\n});\n\naddMappingButton.addEventListener('click', () => {\n    popupContainer.style.display = 'none';\n    const fieldName = popupInput.value;\n    mappingConfig[fieldName] = { columnName: \"\", delimiter: \"\", position: 0 };\n    defaultTemplate[fieldName] = { columnNames: [], delimiter: \"\", position: 0 };\n    addNewRow(fieldName, true);\n    popupInput.value = \"\"; //reset the input field after closing.\n});\n\nwindow.addEventListener('click', (event) => {\n    if (event.target === popupContainer) {\n        popupContainer.style.display = 'none';\n        popupInput.value = \"\";\n    }\n});"],"names":["$87e25a54f10bf52d$var$fileUploadArea","document","getElementById","$87e25a54f10bf52d$var$csvFileInput","$87e25a54f10bf52d$var$fileStatus","$87e25a54f10bf52d$var$csvPreview","$87e25a54f10bf52d$var$mapCsvPreview","$87e25a54f10bf52d$var$templateSearch","$87e25a54f10bf52d$var$templateOptions","$87e25a54f10bf52d$var$mappingTableBody","$87e25a54f10bf52d$var$generateButton","$87e25a54f10bf52d$var$addMappingButton","$87e25a54f10bf52d$var$errorMessage","$87e25a54f10bf52d$var$mappingConfig","firstname","columnName","delimiter","position","lastname","memberid","gender","dob","pickuptime","dropofftime","tollsamt","congestionfee","mileage","servicetype","authorization","puaddress","pucity","pustate","pickupzip","doaddress","docity","dostate","dropoffzip","$87e25a54f10bf52d$var$filename","$87e25a54f10bf52d$var$savedConfigurations","$87e25a54f10bf52d$var$availableColumns","$87e25a54f10bf52d$var$previewRows","$87e25a54f10bf52d$var$csvData","$87e25a54f10bf52d$var$defaultTemplate","columnNames","$87e25a54f10bf52d$var$handleFileUpload","file","files","type","name","textContent","reader","FileReader","onload","e","$87e25a54f10bf52d$var$processCSV","csvText","rows","split","filter","row","trim","headers","map","header","headersObject","forEach","index","dataRows","slice","cell","headerSignature","sort","join","matchingConfig","find","config","mapping","value","initialMapping","Object","keys","field","fieldTemplate","$87e25a54f10bf52d$var$displayCSVPreview","length","innerHTML","tableHTML","uploadCsvHeaders","$87e25a54f10bf52d$var$updateFieldMappings","$87e25a54f10bf52d$var$updateGenerateButtonState","$87e25a54f10bf52d$var$displayMapCSVPreview","error","alert","message","console","target","result","readAsText","$87e25a54f10bf52d$var$hasValidMappings","style","display","fields","replace","previewRow","fieldConfig","columnIndex","parts","parseInt","newRow","$87e25a54f10bf52d$var$addNewRow","firstRow","createElement","targetCell","appendChild","sourceCell","sourceSelectDiv","classList","add","setAttribute","sourceSelectInput","placeholder","sourceSelectDivDropdown","sourceSelectDivDropdownContent","width","option","addEventListener","searchValue","toLowerCase","items","querySelectorAll","item","text","includes","$87e25a54f10bf52d$var$updatePreview","contains","delimiterCell","delimiterInput","positionCell","positionInput","min","previewCell","prepend","mapFieldKey","sourceSelectInputValue","querySelector","positionIndex","sourceValue","hasCSV","hasMapping","disabled","$87e25a54f10bf52d$var$showPopupButton","hasAtLeastOneMapping","preventDefault","borderColor","backgroundColor","dataTransfer","getAttribute","focus","dataRow","push","csvString","blob","Blob","url","URL","createObjectURL","a","href","download","body","click","removeChild","revokeObjectURL","$87e25a54f10bf52d$var$updateConfig","updatedConfigs","existingConfigIndex","findIndex","newConfig","createdAt","Date","toISOString","localStorage","setItem","JSON","stringify","window","savedConfigs","getItem","parse","configSelectDiv","err","$87e25a54f10bf52d$var$popupContainer","$87e25a54f10bf52d$var$popupInput","fieldName","event"],"version":3,"file":"dataformatters.github.io.999053fa.js.map"}